{"items": [{"recommendations": [{"collective": {"tags": ["php"], "external_links": [{"type": "support", "link": "https://stackoverflow.com/contact?topic=15"}], "description": "A collective where developers working with PHP can learn and connect about the open source scripting language.", "link": "/collectives/php", "name": "PHP", "slug": "php"}, "creation_date": 1690151381}], "owner": {"account_id": 846, "reputation": 132862, "user_id": 1109, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.sstatic.net/quAxR.jpg?s=256", "display_name": "Theo", "link": "https://stackoverflow.com/users/1109/theo"}, "is_accepted": true, "community_owned_date": 1499439336, "score": 9692, "last_activity_date": 1731389553, "last_edit_date": 1731389553, "creation_date": 1221309026, "answer_id": 60496, "question_id": 60174, "content_license": "CC BY-SA 4.0", "body": "<p>The <em>correct</em> way to avoid SQL injection attacks, no matter which database you use, is to <strong>separate the data from SQL</strong>, so that data stays data and will <strong>never be interpreted</strong> as commands by the SQL parser. It is possible to create an SQL statement with correctly formatted data parts, but if you don't <em>fully</em> understand the details, you should always <strong>use prepared statements and parameterized queries.</strong> These are SQL statements that are sent to and parsed by the database server separately from any parameters. This way it is impossible for an attacker to inject malicious SQL.</p>\n<p>You basically have two options to achieve this:</p>\n<ol>\n<li><p>Using <a href=\"http://php.net/manual/en/book.pdo.php\" rel=\"noreferrer\"><strong>PDO</strong></a> (for any supported database driver):</p>\n<pre><code>$stmt = $pdo-&gt;prepare('SELECT * FROM users WHERE name = :name');\n$stmt-&gt;execute([ 'name' =&gt; $name ]);\n\nforeach ($stmt as $row) {\n    // Do something with $row\n}\n</code></pre>\n</li>\n<li><p>Using <a href=\"http://php.net/manual/en/book.mysqli.php\" rel=\"noreferrer\"><strong>MySQLi</strong></a> (for MySQL):<br />\n<strong>Since PHP 8.2+</strong> we can make use of <a href=\"https://www.php.net/manual/en/mysqli.execute-query.php\" rel=\"noreferrer\"><code>execute_query()</code></a> which prepares, binds parameters, and executes SQL statement in one method:</p>\n<pre class=\"lang-php prettyprint-override\"><code>$result = $db-&gt;execute_query('SELECT * FROM users WHERE name = ?', [$name]);\nwhile ($row = $result-&gt;fetch_assoc()) {\n    // Do something with $row\n}\n</code></pre>\n<p><strong>Up to PHP8.1:</strong></p>\n<pre class=\"lang-php prettyprint-override\"><code>$stmt = $db-&gt;prepare('SELECT * FROM employees WHERE name = ?');\n$stmt-&gt;bind_param('s', $name); // 's' specifies variable type 'string'\n$stmt-&gt;execute();\n$result = $stmt-&gt;get_result();\nwhile ($row = $result-&gt;fetch_assoc()) {\n    // Do something with $row\n}\n</code></pre>\n</li>\n</ol>\n<p>If you're connecting to a database other than MySQL, there is a driver-specific second option that you can refer to (for example, <code>pg_prepare()</code> and <code>pg_execute()</code> for PostgreSQL). PDO is the universal option.</p>\n<hr />\n<h2>Correctly setting up the connection</h2>\n<h4>PDO</h4>\n<p>Note that when using <strong>PDO</strong> to access a MySQL database <em>real</em> prepared statements are <strong>not used by default</strong>. To fix this you have to disable the emulation of prepared statements. An example of creating a connection using <strong>PDO</strong> is:</p>\n<pre class=\"lang-php prettyprint-override\"><code>$dsn = 'mysql:dbname=dbtest;host=127.0.0.1;charset=utf8mb4';\n$dbConnection = new PDO($dsn, 'user', 'password');\n\n$dbConnection-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n$dbConnection-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n</code></pre>\n<p>In the above example, the error mode isn't strictly necessary, <strong>but it is advised to add it</strong>. This way PDO will inform you of all MySQL errors by means of throwing the <code>PDOException</code>.</p>\n<p>What is <strong>mandatory</strong>, however, is the first <code>setAttribute()</code> line, which tells PDO to disable emulated prepared statements and use <em>real</em> prepared statements. This makes sure the statement and the values aren't parsed by PHP before sending it to the MySQL server (giving a possible attacker no chance to inject malicious SQL).</p>\n<p>Although you can set the <code>charset</code> in the options of the constructor, it's important to note that 'older' versions of PHP (before 5.3.6) <a href=\"http://php.net/manual/en/ref.pdo-mysql.connection.php\" rel=\"noreferrer\">silently ignored the charset parameter</a> in the DSN.</p>\n<h4>Mysqli</h4>\n<p>For mysqli we have to follow the same routine:</p>\n<pre><code>mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT); // error reporting\n$dbConnection = new mysqli('127.0.0.1', 'username', 'password', 'test');\n$dbConnection-&gt;set_charset('utf8mb4'); // charset\n</code></pre>\n<hr />\n<h2>Explanation</h2>\n<p>The SQL statement you pass to <code>prepare</code> is parsed and compiled by the database server. By specifying parameters (either a <code>?</code> or a named parameter like <code>:name</code> in the example above) you tell the database engine where you want to filter on. Then when you call <code>execute</code>, the prepared statement is combined with the parameter values you specify.</p>\n<p>The important thing here is that the parameter values are combined with the compiled statement, not an SQL string. SQL injection works by tricking the script into including malicious strings when it creates SQL to send to the database. So by sending the actual SQL separately from the parameters, you limit the risk of ending up with something you didn't intend.</p>\n<p>Any parameters you send when using a prepared statement will just be treated as strings (although the database engine may do some optimization so parameters may end up as numbers too, of course). In the example above, if the <code>$name</code> variable contains <code>'Sarah'; DELETE FROM employees</code> the result would simply be a search for the string <code>&quot;'Sarah'; DELETE FROM employees&quot;</code>, and you will not end up with <a href=\"http://xkcd.com/327/\" rel=\"noreferrer\">an empty table</a>.</p>\n<p>Another benefit of using prepared statements is that if you execute the same statement many times in the same session it will only be parsed and compiled once, giving you some speed gains.</p>\n<p>Oh, and since you asked about how to do it for an insert, here's an example (using PDO):</p>\n<pre><code>$stmt = $db-&gt;prepare('INSERT INTO table (column) VALUES (:column)');\n$stmt-&gt;execute(['column' =&gt; $value]);\n</code></pre>\n<hr />\n<h2>Can prepared statements be used for dynamic queries?</h2>\n<p>While you can still use prepared statements for the query parameters, the structure of the dynamic query itself cannot be parametrized and certain query features cannot be parametrized.</p>\n<p>For these specific scenarios, the best thing to do is use a whitelist filter that restricts the possible values.</p>\n<pre><code>// Value whitelist\n// $dir can only be 'DESC', otherwise it will be 'ASC'\nif (empty($dir) || $dir !== 'DESC') {\n   $dir = 'ASC';\n}\n</code></pre>\n"}, {"owner": {"account_id": 97, "reputation": 304434, "user_id": 116, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.sstatic.net/f6flX.jpg?s=256", "display_name": "Mark Harrison", "link": "https://stackoverflow.com/users/116/mark-harrison"}, "is_accepted": true, "score": 6728, "last_activity_date": 1639446701, "last_edit_date": 1639446701, "creation_date": 1220309974, "answer_id": 38578, "question_id": 38549, "content_license": "CC BY-SA 4.0", "body": "<p>Assuming you're joining on columns with no duplicates, which is a very common case:</p>\n<ul>\n<li><p>An inner join of A and B gives the result of A intersect B, i.e. the inner part of a <a href=\"http://en.wikipedia.org/wiki/Venn_diagram\" rel=\"noreferrer\">Venn diagram</a> intersection.</p>\n</li>\n<li><p>An outer join of A and B gives the results of A union B, i.e. the outer parts of a <a href=\"http://en.wikipedia.org/wiki/Venn_diagram\" rel=\"noreferrer\">Venn diagram</a> union.</p>\n</li>\n</ul>\n<p><strong>Examples</strong></p>\n<p>Suppose you have two tables, with a single column each, and data as follows:</p>\n<pre><code>A    B\n-    -\n1    3\n2    4\n3    5\n4    6\n</code></pre>\n<p>Note that (1,2) are unique to A, (3,4) are common, and (5,6) are unique to B.</p>\n<p><strong>Inner join</strong></p>\n<p>An inner join using either of the equivalent queries gives the intersection of the two tables, i.e. the two rows they have in common.</p>\n<pre><code>select * from a INNER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a = b.b;\n\na | b\n--+--\n3 | 3\n4 | 4\n</code></pre>\n<p><strong>Left outer join</strong></p>\n<p>A left outer join will give all rows in A, plus any common rows in B.</p>\n<pre><code>select * from a LEFT OUTER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a = b.b(+);\n\na |  b\n--+-----\n1 | null\n2 | null\n3 |    3\n4 |    4\n</code></pre>\n<p><strong>Right outer join</strong></p>\n<p>A right outer join will give all rows in B, plus any common rows in A.</p>\n<pre><code>select * from a RIGHT OUTER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a(+) = b.b;\n\na    |  b\n-----+----\n3    |  3\n4    |  4\nnull |  5\nnull |  6\n</code></pre>\n<p><strong>Full outer join</strong></p>\n<p>A full outer join will give you the union of A and B, i.e. all the rows in A and all the rows in B. If something in A doesn't have a corresponding datum in B, then the B portion is null, and vice versa.</p>\n<pre><code>select * from a FULL OUTER JOIN b on a.a = b.b;\n\n a   |  b\n-----+-----\n   1 | null\n   2 | null\n   3 |    3\n   4 |    4\nnull |    6\nnull |    5\n</code></pre>\n"}, {"owner": {"account_id": 17933, "reputation": 102458, "user_id": 40655, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/df1b153342c6ff6cc0a670adfebe61db?s=256&d=identicon&r=PG", "display_name": "Robin Day", "link": "https://stackoverflow.com/users/40655/robin-day"}, "is_accepted": true, "score": 6082, "last_activity_date": 1461979595, "last_edit_date": 1461979595, "creation_date": 1267108795, "answer_id": 2334741, "question_id": 2334712, "content_license": "CC BY-SA 3.0", "body": "<pre><code>UPDATE\n    Table_A\nSET\n    Table_A.col1 = Table_B.col1,\n    Table_A.col2 = Table_B.col2\nFROM\n    Some_Table AS Table_A\n    INNER JOIN Other_Table AS Table_B\n        ON Table_A.id = Table_B.id\nWHERE\n    Table_A.col3 = 'cool'\n</code></pre>\n"}, {"owner": {"account_id": 8814, "reputation": 42763, "user_id": 16030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a73e5d52c3174aaf868f8f1fef770e6d?s=256&d=identicon&r=PG", "display_name": "James Boother", "link": "https://stackoverflow.com/users/16030/james-boother"}, "is_accepted": true, "score": 4164, "last_activity_date": 1530650655, "last_edit_date": 1530650655, "creation_date": 1221741273, "answer_id": 92123, "question_id": 92082, "content_license": "CC BY-SA 4.0", "body": "<h2>Syntax:</h2>\n\n<pre><code>ALTER TABLE {TABLENAME} \nADD {COLUMNNAME} {TYPE} {NULL|NOT NULL} \nCONSTRAINT {CONSTRAINT_NAME} DEFAULT {DEFAULT_VALUE}\nWITH VALUES\n</code></pre>\n\n<h2>Example:</h2>\n\n<pre><code>ALTER TABLE SomeTable\n        ADD SomeCol Bit NULL --Or NOT NULL.\n CONSTRAINT D_SomeTable_SomeCol --When Omitted a Default-Constraint Name is autogenerated.\n    DEFAULT (0)--Optional Default-Constraint.\nWITH VALUES --Add if Column is Nullable and you want the Default Value for Existing Records.\n</code></pre>\n\n<h2>Notes:</h2>\n\n<p><strong>Optional Constraint Name:</strong><br />\nIf you leave out <code>CONSTRAINT D_SomeTable_SomeCol</code> then SQL Server will autogenerate<br />\n&nbsp; &nbsp; a Default-Contraint with a funny Name like: <code>DF__SomeTa__SomeC__4FB7FEF6</code><br /></p>\n\n<p><strong>Optional With-Values Statement:</strong><br />\nThe <code>WITH VALUES</code> is only needed when your Column is Nullable<br />\n&nbsp; &nbsp; and you want the Default Value used for Existing Records.<br />\nIf your Column is <code>NOT NULL</code>, then it will automatically use the Default Value<br />\n&nbsp; &nbsp; for all Existing Records, whether you specify <code>WITH VALUES</code> or not.</p>\n\n<p><strong>How Inserts work with a Default-Constraint:</strong><br />\nIf you insert a Record into <code>SomeTable</code> and do <strong><em>not</em></strong> Specify <code>SomeCol</code>'s value, then it will Default to <code>0</code>.<br />\nIf you insert a Record <strong><em>and</em></strong> Specify <code>SomeCol</code>'s value as <code>NULL</code> (and your column allows nulls),<br />\n&nbsp; &nbsp; then the Default-Constraint will <strong><em>not</em></strong> be used and <code>NULL</code> will be inserted as the Value.<br /></p>\n\n<p>Notes were based on everyone's great feedback below.<br />\nSpecial Thanks to:<br />\n&nbsp; &nbsp; @Yatrix, @WalterStabosz, @YahooSerious, and @StackMan for their Comments.</p>\n"}, {"owner": {"account_id": 210, "reputation": 83981, "user_id": 264, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/49ee8012580951780d10ae8b12570e21?s=256&d=identicon&r=PG", "display_name": "Xenph Yan", "link": "https://stackoverflow.com/users/264/xenph-yan"}, "is_accepted": true, "score": 4163, "last_activity_date": 1628586164, "last_edit_date": 1628586164, "creation_date": 1217846464, "answer_id": 1130, "question_id": 1108, "content_license": "CC BY-SA 4.0", "body": "<p><strong>Why is it needed?</strong></p>\n<p>When data is stored on disk-based storage devices, it is stored as blocks of data. These blocks are accessed in their entirety, making them the atomic disk access operation. Disk blocks are structured in much the same way as linked lists; both contain a section for data, a pointer to the location of the next node (or block), and both need not be stored contiguously.</p>\n<p>Due to the fact that a number of records can only be sorted on one field, we can state that searching on a field that isn\u2019t sorted requires a Linear Search which requires <code>(N+1)/2</code> block accesses (on average), where <code>N</code> is the number of blocks that the table spans. If that field is a non-key field (i.e. doesn\u2019t contain unique entries) then the entire tablespace must be searched at <code>N</code> block accesses.</p>\n<p>Whereas with a sorted field, a Binary Search may be used, which has <code>log2 N</code> block accesses. Also since the data is sorted given a non-key field, the rest of the table doesn\u2019t need to be searched for duplicate values, once a higher value is found. Thus the performance increase is substantial.</p>\n<p><strong>What is indexing?</strong></p>\n<p>Indexing is a way of sorting a number of records on multiple fields. Creating an index on a field in a table creates another data structure which holds the field value, and a pointer to the record it relates to. This index structure is then sorted, allowing Binary Searches to be performed on it.</p>\n<p>The downside to indexing is that these indices require additional space on the disk since the indices are stored together in a table using the MyISAM engine, this file can quickly reach the size limits of the underlying file system if many fields within the same table are indexed.</p>\n<p><strong>How does it work?</strong></p>\n<p>Firstly, let\u2019s outline a sample database table schema;</p>\n<pre>\nField name       Data type      Size on disk\nid (Primary key) Unsigned INT   4 bytes\nfirstName        Char(50)       50 bytes\nlastName         Char(50)       50 bytes\nemailAddress     Char(100)      100 bytes\n</pre>\n<p><strong>Note</strong>: char was used in place of varchar to allow for an accurate size on disk value.\nThis sample database contains five million rows and is unindexed. The performance of several queries will now be analyzed. These are a query using the <em>id</em> (a sorted key field) and one using the <em>firstName</em> (a non-key unsorted field).</p>\n<p><em><strong>Example 1</strong></em> - <em>sorted vs unsorted fields</em></p>\n<p>Given our sample database of <code>r = 5,000,000</code> records of a fixed size giving a record length of <code>R = 204</code> bytes and they are stored in a table using the MyISAM engine which is using the default block size <code>B = 1,024</code> bytes. The blocking factor of the table would be <code>bfr = (B/R) = 1024/204 = 5</code> records per disk block. The total number of blocks required to hold the table is <code>N = (r/bfr) = 5000000/5 = 1,000,000</code> blocks.</p>\n<p>A linear search on the id field would require an average of <code>N/2 = 500,000</code> block accesses to find a value, given that the id field is a key field. But since the id field is also sorted, a binary search can be conducted requiring an average of <code>log2 1000000 = 19.93 = 20</code> block accesses. Instantly we can see this is a drastic improvement.</p>\n<p>Now the <em>firstName</em> field is neither sorted nor a key field, so a binary search is impossible, nor are the values unique, and thus the table will require searching to the end for an exact <code>N = 1,000,000</code> block accesses. It is this situation that indexing aims to correct.</p>\n<p>Given that an index record contains only the indexed field and a pointer to the original record, it stands to reason that it will be smaller than the multi-field record that it points to. So the index itself requires fewer disk blocks than the original table, which therefore requires fewer block accesses to iterate through. The schema for an index on the <em>firstName</em> field is outlined below;</p>\n<pre>\nField name       Data type      Size on disk\nfirstName        Char(50)       50 bytes\n(record pointer) Special        4 bytes\n</pre>\n<p><strong>Note</strong>: Pointers in MySQL are 2, 3, 4 or 5 bytes in length depending on the size of the table.</p>\n<p><em><strong>Example 2</strong></em>  - <em>indexing</em></p>\n<p>Given our sample database of <code>r = 5,000,000</code> records with an index record length of <code>R = 54</code> bytes and using the default block size <code>B = 1,024</code> bytes. The blocking factor of the index would be <code>bfr = (B/R) = 1024/54 = 18</code> records per disk block. The total number of blocks required to hold the index is <code>N = (r/bfr) = 5000000/18 = 277,778</code> blocks.</p>\n<p>Now a search using the <em>firstName</em> field can utilize the index to increase performance. This allows for a binary search of the index with an average of <code>log2 277778 = 18.08 = 19</code> block accesses. To find the address of the actual record, which requires a further block access to read, bringing the total to <code>19 + 1 = 20</code> block accesses, a far cry from the 1,000,000 block accesses required to find a <em>firstName</em> match in the non-indexed table.</p>\n<p><strong>When should it be used?</strong></p>\n<p>Given that creating an index requires additional disk space (277,778 blocks extra from the above example, a ~28% increase), and that too many indices can cause issues arising from the file systems size limits, careful thought must be used to select the correct fields to index.</p>\n<p>Since indices are only used to speed up the searching for a matching field within the records, it stands to reason that indexing fields used only for output would be simply a waste of disk space and processing time when doing an insert or delete operation, and thus should be avoided. Also given the nature of a binary search, the cardinality or uniqueness of the data is important. Indexing on a field with a cardinality of 2 would split the data in half, whereas a cardinality of 1,000 would return approximately 1,000 records. With such a low cardinality the effectiveness is reduced to a linear sort, and the query optimizer will avoid using the index if the cardinality is less than 30% of the record number, effectively making the index a waste of space.</p>\n"}, {"owner": {"account_id": 13638, "reputation": 432180, "user_id": 27535, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4190f05bc2af559580aa220d0139e9f8?s=256&d=identicon&r=PG", "display_name": "gbn", "link": "https://stackoverflow.com/users/27535/gbn"}, "is_accepted": true, "score": 3772, "last_activity_date": 1527854382, "last_edit_date": 1527854382, "creation_date": 1270664418, "answer_id": 2594855, "question_id": 2594829, "content_license": "CC BY-SA 4.0", "body": "<pre><code>SELECT\n    name, email, COUNT(*)\nFROM\n    users\nGROUP BY\n    name, email\nHAVING \n    COUNT(*) &gt; 1\n</code></pre>\n\n<p>Simply group on both of the columns.</p>\n\n<p>Note: the older ANSI standard is to have all non-aggregated columns in the GROUP BY but this has changed with the idea of <a href=\"https://blog.jooq.org/2015/12/10/sql-group-by-and-functional-dependencies-a-very-useful-feature/\" rel=\"noreferrer\">\"functional dependency\"</a>:</p>\n\n<blockquote>\n  <p>In relational database theory, a functional dependency is a constraint between two sets of attributes in a relation from a database. In other words, functional dependency is a constraint that describes the relationship between attributes in a relation.</p>\n</blockquote>\n\n<p>Support is not consistent:</p>\n\n<ul>\n<li>Recent PostgreSQL <a href=\"https://www.postgresql.org/docs/current/static/sql-select.html#SQL-GROUPBY\" rel=\"noreferrer\">supports it</a>.</li>\n<li>SQL Server (as at SQL Server 2017) still requires all non-aggregated columns in the GROUP BY.</li>\n<li>MySQL is unpredictable and you need <code>sql_mode=only_full_group_by</code>:\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/10894820/27535\">GROUP BY lname ORDER BY showing wrong results</a>;</li>\n<li><a href=\"https://stackoverflow.com/questions/6060241/which-is-the-least-expensive-aggregate-function-in-the-absence-of-any/6060414#6060414\">Which is the least expensive aggregate function in the absence of ANY()</a> (see comments in accepted answer).</li>\n</ul></li>\n<li>Oracle isn't mainstream enough (warning: humour, I don't know about Oracle).</li>\n</ul>\n"}, {"owner": {"account_id": 188123, "reputation": 247630, "user_id": 426671, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.sstatic.net/zgBsf.jpg?s=256", "display_name": "Taryn", "link": "https://stackoverflow.com/users/426671/taryn"}, "is_accepted": true, "score": 3016, "last_activity_date": 1610758819, "last_edit_date": 1610758819, "creation_date": 1368186211, "answer_id": 16481475, "question_id": 16481379, "content_license": "CC BY-SA 4.0", "body": "<p>You need to specify what table you are deleting from. Here is a version with an alias:</p>\n<pre><code>DELETE w\nFROM WorkRecord2 w\nINNER JOIN Employee e\n  ON EmployeeRun=EmployeeNo\nWHERE Company = '1' AND Date = '2013-05-06'\n</code></pre>\n"}, {"owner": {"account_id": 33989, "reputation": 95093, "user_id": 95589, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/425a435945963bb26abb2887ddaa2df9?s=256&d=identicon&r=PG", "display_name": "Eric", "link": "https://stackoverflow.com/users/95589/eric"}, "is_accepted": true, "score": 2959, "last_activity_date": 1683994789, "last_edit_date": 1683994789, "creation_date": 1250595857, "answer_id": 1293347, "question_id": 1293330, "content_license": "CC BY-SA 4.0", "body": "<p>Syntax strictly depends on which SQL DBMS you're using. Here are some ways to do it in ANSI/ISO (aka should work on any SQL DBMS), MySQL, SQL Server, and Oracle. Be advised that my suggested ANSI/ISO method will typically be much slower than the other two methods, but if you're using a SQL DBMS other than MySQL, SQL Server, or Oracle, then it may be the only way to go (e.g. if your SQL DBMS doesn't support <code>MERGE</code>):</p>\n<p>ANSI/ISO:</p>\n<pre><code>update ud \n     set assid = (\n          select sale.assid \n          from sale \n          where sale.udid = ud.id\n     )\n where exists (\n      select * \n      from sale \n      where sale.udid = ud.id\n );\n</code></pre>\n<p>MySQL:</p>\n<pre><code>update ud u\ninner join sale s on\n    u.id = s.udid\nset u.assid = s.assid\n</code></pre>\n<p>SQL Server:</p>\n<pre><code>update u\nset u.assid = s.assid\nfrom ud u\n    inner join sale s on\n        u.id = s.udid\n</code></pre>\n<p>PostgreSQL:</p>\n<pre><code>update ud\n  set assid = s.assid\nfrom sale s \nwhere ud.id = s.udid;\n</code></pre>\n<p>Note that the target table must not be repeated in the <code>FROM</code> clause for Postgres. Main question: <a href=\"https://stackoverflow.com/questions/7869592/how-to-do-an-update-join-in-postgresql\">How to do an update + join in PostgreSQL?</a></p>\n<p>Oracle:</p>\n<pre><code>update\n    (select\n        u.assid as new_assid,\n        s.assid as old_assid\n    from ud u\n        inner join sale s on\n            u.id = s.udid) up\nset up.new_assid = up.old_assid\n</code></pre>\n<p>SQLite:</p>\n<pre><code>update ud \n     set assid = (\n          select sale.assid \n          from sale \n          where sale.udid = ud.id\n     )\n where RowID in (\n      select RowID \n      from ud \n      where sale.udid = ud.id\n );\n</code></pre>\n<p>SQLite 3.33 added support for an <code>UPDATE</code> + <code>FROM</code> syntax analogous to the PostgreSQL one:</p>\n<pre><code>update ud\n  set assid = s.assid\nfrom sale s \nwhere ud.id = s.udid;\n</code></pre>\n<p>Main question: <a href=\"https://stackoverflow.com/questions/19270259/update-with-join-in-sqlite\">Update with Join in SQLite</a></p>\n"}, {"owner": {"account_id": 912, "reputation": 123966, "user_id": 1196, "user_type": "registered", "accept_rate": 37, "profile_image": "https://i.sstatic.net/iQcva.jpg?s=256", "display_name": "aku", "link": "https://stackoverflow.com/users/1196/aku"}, "is_accepted": true, "score": 2870, "last_activity_date": 1709136911, "last_edit_date": 1709136911, "creation_date": 1222054456, "answer_id": 113055, "question_id": 113045, "content_license": "CC BY-SA 4.0", "body": "<p><em>NOTE: This answer returns the original <code>DATETIME</code> or <code>DATETIME2</code> type. For an expression that returns a true <code>DATE</code> type (SQL Server 2008 and later), see <a href=\"https://stackoverflow.com/a/126984/1501497\">BenR's answer</a> below.</em></p>\n<pre><code>SELECT DATEADD(dd, 0, DATEDIFF(dd, 0, @your_date))\n</code></pre>\n<p>for example</p>\n<pre><code>SELECT DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))\n</code></pre>\n<p>gives me</p>\n<pre><code>2008-09-22 00:00:00.000\n</code></pre>\n<p>Pros:</p>\n<ul>\n<li>No varchar&lt;-&gt;datetime conversions required</li>\n<li>No need to think about locale</li>\n</ul>\n"}, {"owner": {"account_id": 8306, "reputation": 59653, "user_id": 14902, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/04c4396f3d538f5aad32adb496467de3?s=256&d=identicon&r=PG", "display_name": "Smashery", "link": "https://stackoverflow.com/users/14902/smashery"}, "is_accepted": true, "score": 2827, "last_activity_date": 1596329399, "last_edit_date": 1596329399, "creation_date": 1268263441, "answer_id": 2421441, "question_id": 2421388, "content_license": "CC BY-SA 4.0", "body": "<p><code>Group By X</code> means <strong>put all those with the same value for X in the one group</strong>.</p>\n<p><code>Group By X, Y</code> means <strong>put all those with the same values for both X and Y in the one group</strong>.</p>\n<p>To illustrate using an example, let's say we have the following table, to do with who is attending what subject at a university:</p>\n<pre><code>Table: Subject_Selection\n\n+---------+----------+----------+\n| Subject | Semester | Attendee |\n+---------+----------+----------+\n| ITB001  |        1 | John     |\n| ITB001  |        1 | Bob      |\n| ITB001  |        1 | Mickey   |\n| ITB001  |        2 | Jenny    |\n| ITB001  |        2 | James    |\n| MKB114  |        1 | John     |\n| MKB114  |        1 | Erica    |\n+---------+----------+----------+\n</code></pre>\n<p>When you use a <code>group by</code> on the subject column only; say:</p>\n<pre><code>select Subject, Count(*)\nfrom Subject_Selection\ngroup by Subject\n</code></pre>\n<p>You will get something like:</p>\n<pre><code>+---------+-------+\n| Subject | Count |\n+---------+-------+\n| ITB001  |     5 |\n| MKB114  |     2 |\n+---------+-------+\n</code></pre>\n<p>...because there are 5 entries for ITB001, and 2 for MKB114</p>\n<p>If we were to <code>group by</code> two columns:</p>\n<pre><code>select Subject, Semester, Count(*)\nfrom Subject_Selection\ngroup by Subject, Semester\n</code></pre>\n<p>we would get this:</p>\n<pre><code>+---------+----------+-------+\n| Subject | Semester | Count |\n+---------+----------+-------+\n| ITB001  |        1 |     3 |\n| ITB001  |        2 |     2 |\n| MKB114  |        1 |     2 |\n+---------+----------+-------+\n</code></pre>\n<p>This is because, when we group by two columns, it is saying <strong>&quot;Group them so that all of those with the same Subject and Semester are in the same group, and then calculate all the aggregate functions</strong> (Count, Sum, Average, etc.) <strong>for each of those groups&quot;</strong>. In this example, this is demonstrated by the fact that, when we count them, there are <strong>three</strong> people doing ITB001 in semester 1, and <strong>two</strong> doing it in semester 2. Both of the people doing MKB114 are in semester 1, so there is no row for semester 2 (no data fits into the group &quot;MKB114, Semester 2&quot;)</p>\n<p>Hopefully that makes sense.</p>\n"}, {"owner": {"account_id": 49155, "reputation": 30499, "user_id": 146270, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d3eab8ee69d374c150510ced730cd6f6?s=256&d=identicon&r=PG", "display_name": "BinaryMisfit", "link": "https://stackoverflow.com/users/146270/binarymisfit"}, "is_accepted": false, "score": 2756, "last_activity_date": 1736161863, "last_edit_date": 1736161863, "creation_date": 1232176454, "answer_id": 452934, "question_id": 452859, "content_license": "CC BY-SA 4.0", "body": "<p>In SQL Server 2008 you can insert multiple rows using a single <code>INSERT</code> statement.</p>\n<pre><code>INSERT INTO MyTable ( Column1, Column2 ) VALUES\n( Value1, Value2 ), ( Value1, Value2 )\n</code></pre>\n<p>For reference to this have a look at MOC Course 2778A - Writing SQL Queries in SQL Server 2008.</p>\n<p>For example:</p>\n<pre><code>INSERT INTO MyTable\n  ( Column1, Column2, Column3 )\nVALUES\n  ('John', 123, 'Lloyds Office'), \n  ('Jane', 124, 'Lloyds Office'), \n  ('Billy', 125, 'London Office'),\n  ('Miranda', 126, 'Bristol Office');\n</code></pre>\n<p>This syntax is, however, limited to a maximum of 1,000 rows. If you need to <code>INSERT</code> more than 1,000 rows, this can be worked around using a derived table in a <code>SELECT</code> instead, which doesn't have the same limitation:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>INSERT INTO MyTable ( Column1, Column2, Column3 )\nSELECT V.Column1,\n       V.Column2,\n       V.Column3\nFROM (VALUES('John', 123, 'Lloyds Office'), \n            ('Jane', 124, 'Lloyds Office'), \n            ('Billy', 125, 'London Office'),\n            ...\n            ('Sally', 10026, 'Bristol Office'))V(Column1, Column2, Column3);\n</code></pre>\n"}, {"owner": {"account_id": 45914, "reputation": 147224, "user_id": 135531, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.sstatic.net/zOCy7yx5.jpg?s=256", "display_name": "AdaTheDev", "link": "https://stackoverflow.com/users/135531/adathedev"}, "is_accepted": false, "score": 2750, "last_activity_date": 1697450567, "last_edit_date": 1697450567, "creation_date": 1296469077, "answer_id": 4849704, "question_id": 4849652, "content_license": "CC BY-SA 4.0", "body": "<p><strong>Search Tables:</strong></p>\n<pre><code>SELECT      c.name  AS 'ColumnName'\n            ,(SCHEMA_NAME(t.schema_id) + '.' + t.name) AS 'TableName'\nFROM        sys.columns c\nJOIN        sys.tables  t   ON c.object_id = t.object_id\nWHERE       c.name LIKE '%MyName%'\nORDER BY    TableName\n            ,ColumnName;\n</code></pre>\n<p><strong>Search Tables and Views:</strong></p>\n<pre><code>SELECT      COLUMN_NAME AS 'ColumnName'\n            ,TABLE_NAME AS  'TableName'\nFROM        INFORMATION_SCHEMA.COLUMNS\nWHERE       COLUMN_NAME LIKE '%MyName%'\nORDER BY    TableName\n            ,ColumnName;\n</code></pre>\n"}, {"owner": {"account_id": 1034241, "reputation": 49919, "user_id": 1041948, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/d30ba8f80edac7adf38a9c9ce92b5bbe?s=256&d=identicon&r=PG", "display_name": "Niels", "link": "https://stackoverflow.com/users/1041948/niels"}, "is_accepted": true, "score": 2637, "last_activity_date": 1687970196, "last_edit_date": 1687970196, "creation_date": 1326962382, "answer_id": 8923132, "question_id": 8923114, "content_license": "CC BY-SA 4.0", "body": "<p>You can reset the counter with:</p>\n<pre><code>ALTER TABLE tablename AUTO_INCREMENT = 1\n</code></pre>\n<h2>InnoDB</h2>\n<p>For <a href=\"https://en.wikipedia.org/wiki/InnoDB\" rel=\"noreferrer\">InnoDB</a> you cannot set the <code>auto_increment</code> value lower or equal to the highest current index. (quote from <a href=\"http://viralpatel.net/blogs/reseting-mysql-autoincrement-column/\" rel=\"noreferrer\">ViralPatel</a>):</p>\n<blockquote>\n<p>Note that you cannot reset the counter to a value less than or equal\nto any that have already been used. For MyISAM, if the value is less\nthan or equal to the maximum value currently in the AUTO_INCREMENT\ncolumn, the value is reset to the current maximum plus one. For\nInnoDB, if the value is less than the current maximum value in the\ncolumn, no error occurs and the current sequence value is not changed.</p>\n</blockquote>\n<h2>Aria</h2>\n<p>In a table with the <a href=\"https://mariadb.com/kb/en/aria/\" rel=\"noreferrer\">Aria</a> storage engine the <em>auto_increment</em> value can be set to any value, even lower than that of the current maximum. The next insert however <em>will</em> use the next available value (max + 1) ignoring the set value. If set to a higher value it will continue to use and increment from that. The documentation is not particular clear on that but this was observed with Mariadb 10.11.3</p>\n<h2>See also</h2>\n<p>See <em><a href=\"https://stackoverflow.com/questions/2410689/how-can-i-reset-an-mysql-autoincrement-using-a-max-value-from-another-table\">How can I reset an MySQL AutoIncrement using a MAX value from another table?</a></em> on how to dynamically get an acceptable value.</p>\n"}, {"owner": {"user_type": "does_not_exist", "display_name": "anon"}, "is_accepted": false, "score": 2582, "last_activity_date": 1407334347, "last_edit_date": 1407334347, "creation_date": 1368745414, "answer_id": 16598900, "question_id": 38549, "content_license": "CC BY-SA 3.0", "body": "<p>Also you can consider the following schema for different join types;</p>\n\n<p><img src=\"https://i.sstatic.net/1UKp7.png\" alt=\"visual explanation of joins\"></p>\n\n<p>Source: <strong><a href=\"http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins\">Visual-Representation-of-SQL-Joins</a></strong> explained in detail by <strong><a href=\"http://www.codeproject.com/script/Membership/View.aspx?mid=5909363\">C.L. Moffatt</a></strong></p>\n"}, {"owner": {"account_id": 276639, "reputation": 58595, "user_id": 570191, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/48427d43e2b819f978aa8246fc453b82?s=256&d=identicon&r=PG", "display_name": "Adriano Carneiro", "link": "https://stackoverflow.com/users/570191/adriano-carneiro"}, "is_accepted": true, "score": 2578, "last_activity_date": 1636373740, "last_edit_date": 1636373740, "creation_date": 1318448633, "answer_id": 7745635, "question_id": 7745609, "content_license": "CC BY-SA 4.0", "body": "<h2>At first glance...</h2>\n<p>All you need is a <code>GROUP BY</code> clause with the <code>MAX</code> aggregate function:</p>\n<pre><code>SELECT id, MAX(rev)\nFROM YourTable\nGROUP BY id\n</code></pre>\n<h2>It's never that simple, is it?</h2>\n<p>I just noticed you need the <code>content</code> column as well.</p>\n<p>This is a very common question in SQL: find the whole data for the row with some max value in a column per some group identifier. I heard that a lot during my career. Actually, it was one the questions I answered in my current job's technical interview.</p>\n<p>It is, actually, so common that Stack Overflow community has created a single tag just to deal with questions like that: <a href=\"/questions/tagged/greatest-n-per-group\" class=\"post-tag\" title=\"show questions tagged &#39;greatest-n-per-group&#39;\" rel=\"tag\">greatest-n-per-group</a>.</p>\n<p>Basically, you have two approaches to solve that problem:</p>\n<h2>Joining with simple <code>group-identifier, max-value-in-group</code> Sub-query</h2>\n<p>In this approach, you first find the <code>group-identifier, max-value-in-group</code> (already solved above) in a sub-query. Then you join your table to the sub-query with equality on both <code>group-identifier</code> and <code>max-value-in-group</code>:</p>\n<pre><code>SELECT a.id, a.rev, a.contents\nFROM YourTable a\nINNER JOIN (\n    SELECT id, MAX(rev) rev\n    FROM YourTable\n    GROUP BY id\n) b ON a.id = b.id AND a.rev = b.rev\n</code></pre>\n<h2>Left Joining with self, tweaking join conditions and filters</h2>\n<p>In this approach, you left join the table with itself. Equality goes in the <code>group-identifier</code>. Then, 2 smart moves:</p>\n<ol>\n<li>The second join condition is having left side value less than right value</li>\n<li>When you do step 1, the row(s) that actually have the max value will have <code>NULL</code> in the right side (it's a <code>LEFT JOIN</code>, remember?). Then, we filter the joined result, showing only the rows where the right side is <code>NULL</code>.</li>\n</ol>\n<p>So you end up with:</p>\n<pre><code>SELECT a.*\nFROM YourTable a\nLEFT OUTER JOIN YourTable b\n    ON a.id = b.id AND a.rev &lt; b.rev\nWHERE b.id IS NULL;\n</code></pre>\n<h2>Conclusion</h2>\n<p>Both approaches bring the exact same result.</p>\n<p>If you have two rows with <code>max-value-in-group</code> for <code>group-identifier</code>, both rows will be in the result in both approaches.</p>\n<p>Both approaches are SQL ANSI compatible, thus, will work with your favorite RDBMS, regardless of its &quot;flavor&quot;.</p>\n<p>Both approaches are also performance friendly, however your mileage may vary (RDBMS, DB Structure, Indexes, etc.). So when you pick one approach over the other, <em>benchmark</em>. And make sure you pick the one which make most of sense to you.</p>\n"}, {"owner": {"account_id": 171342, "reputation": 25794, "user_id": 398687, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0547c5be3b2838899922eb8406f989c?s=256&d=identicon&r=PG", "display_name": "Kyle H", "link": "https://stackoverflow.com/users/398687/kyle-h"}, "is_accepted": true, "score": 2573, "last_activity_date": 1699655515, "last_edit_date": 1699655515, "creation_date": 1279771070, "answer_id": 3305687, "question_id": 3305561, "content_license": "CC BY-SA 4.0", "body": "<p>That would have to be:</p>\n<pre><code>db.users.find({&quot;name&quot;: /.*m.*/})\n</code></pre>\n<p>Or, similar:</p>\n<pre><code>db.users.find({&quot;name&quot;: /m/})\n</code></pre>\n<p>You're looking for something that contains &quot;m&quot; somewhere (SQL's '<code>%</code>' operator is equivalent to regular expressions' '<code>.*</code>'), not something that has &quot;m&quot; anchored to the beginning of the string.</p>\n<p><strong>Note:</strong> MongoDB uses regular expressions <a href=\"https://www.mongodb.com/docs/v7.0/reference/operator/query/regex/#syntax\" rel=\"noreferrer\">(see docs)</a> which are more powerful than &quot;LIKE&quot; in SQL. With regular expressions you can create any pattern that you imagine.</p>\n<p>For more information on regular expressions, refer to <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noreferrer\">Regular expressions</a></em> (MDN).</p>\n"}, {"owner": {"account_id": 215928, "reputation": 1969, "user_id": 470854, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7a3761a60df9e2b3d986a31302c829d8?s=256&d=identicon&r=PG", "display_name": "Nestor", "link": "https://stackoverflow.com/users/470854/nestor"}, "is_accepted": false, "community_owned_date": 1304160976, "score": 2341, "last_activity_date": 1685373647, "last_edit_date": 1685373647, "creation_date": 1304160976, "answer_id": 5841297, "question_id": 338156, "content_license": "CC BY-SA 4.0", "body": "<p>I had same question, and after reading all answers here I definitely stay with <em><strong>SINGULAR</strong></em>, reasons:</p>\n<p><s><strong>Reason 1</strong> (Concept). You can think of bag containing apples like &quot;AppleBag&quot;, it doesn't matter if contains 0, 1 or a million apples, it is always the same bag. Tables are just that, containers, the table name must describe what it contains, not how much data it contains. Additionally, the plural concept is more about a spoken language one (actually to determine whether there is one or more).</s></p>\n<p><strong>Reason 2</strong>. (Convenience). it is easier come out with singular names, than with plural ones. Objects can have irregular plurals or not plural at all, but will always have a singular one (with few exceptions like News).</p>\n<ul>\n<li>Customer</li>\n<li>Order</li>\n<li>User</li>\n<li>Status</li>\n<li>News</li>\n</ul>\n<p><strong>Reason 3</strong>. (Aesthetic and Order). Specially in master-detail scenarios, this reads better, aligns better by name, and have more logical order (Master first, Detail second):</p>\n<ul>\n<li>1.Order</li>\n<li>2.OrderDetail</li>\n</ul>\n<p>Compared to:</p>\n<ul>\n<li>1.OrderDetails</li>\n<li>2.Orders</li>\n</ul>\n<p><strong>Reason 4</strong> (Simplicity). Put all together, Table Names, Primary Keys, Relationships, Entity Classes... is better to be aware of only one name (singular) instead of two (singular class, plural table, singular field, singular-plural master-detail...)</p>\n<ul>\n<li><code>Customer</code></li>\n<li><code>Customer.CustomerID</code></li>\n<li><code>CustomerAddress</code></li>\n<li><code>public Class Customer {...}</code></li>\n<li><code>SELECT FROM Customer WHERE CustomerID = 100</code></li>\n</ul>\n<p>Once you know you are dealing with &quot;Customer&quot;, you can be sure you will use the same word for all of your database interaction needs.</p>\n<p><strong>Reason 5</strong>. (Globalization). The world is getting smaller, you may have a team of different nationalities, not everybody has English as a native language. It would be easier for a non-native English language programmer to think of &quot;Repository&quot; than of &quot;Repositories&quot;, or &quot;Status&quot; instead of &quot;Statuses&quot;. Having singular names can lead to fewer errors caused by typos, save time by not having to think &quot;is it Child or Children?&quot;, hence improving productivity.</p>\n<p><strong>Reason 6</strong>. (Why not?). It can even save you writing time, save you disk space, and even make your computer keyboard last longer!</p>\n<ul>\n<li><code>SELECT Customer.CustomerName FROM Customer WHERE Customer.CustomerID = 100</code></li>\n<li><code>SELECT Customers.CustomerName FROM Customers WHERE Customers.CustomerID = 103</code></li>\n</ul>\n<p>You have saved 3 letters, 3 bytes, 3 extra keyboard hits :)</p>\n<p>And finally, you can name those ones messing up with reserved names like:</p>\n<ul>\n<li>User &gt; LoginUser, AppUser, SystemUser, CMSUser,...</li>\n</ul>\n<p>Or use the infamous square brackets [User]</p>\n"}, {"owner": {"account_id": 75122, "reputation": 46903, "user_id": 215568, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b05685e6c3945f4bd23bf1f967861aeb?s=256&d=identicon&r=PG", "display_name": "Donnie", "link": "https://stackoverflow.com/users/215568/donnie"}, "is_accepted": true, "score": 2114, "last_activity_date": 1494568419, "last_edit_date": 1494568419, "creation_date": 1290003176, "answer_id": 4205207, "question_id": 4205181, "content_license": "CC BY-SA 3.0", "body": "<p>Use <a href=\"https://dev.mysql.com/doc/en/insert-on-duplicate.html\" rel=\"noreferrer\"><code>INSERT ... ON DUPLICATE KEY UPDATE</code></a></p>\n\n<p><strong>QUERY:</strong></p>\n\n<pre><code>INSERT INTO table (id, name, age) VALUES(1, \"A\", 19) ON DUPLICATE KEY UPDATE    \nname=\"A\", age=19\n</code></pre>\n"}, {"owner": {"account_id": 4990, "reputation": 12263, "user_id": 7806, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1595b03e30f6846f4232cba7e3583ddd?s=256&d=identicon&r=PG", "display_name": "che", "link": "https://stackoverflow.com/users/7806/che"}, "is_accepted": true, "community_owned_date": 1331050616, "score": 2110, "last_activity_date": 1604035178, "last_edit_date": 1604035178, "creation_date": 1226285291, "answer_id": 276949, "question_id": 276927, "content_license": "CC BY-SA 4.0", "body": "<p>You can use <a href=\"https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_group-concat\" rel=\"noreferrer\"><code>GROUP_CONCAT</code></a>:</p>\n<pre><code>SELECT person_id,\n   GROUP_CONCAT(hobbies SEPARATOR ', ')\nFROM peoples_hobbies\nGROUP BY person_id;\n</code></pre>\n<p>As Ludwig stated in <a href=\"https://stackoverflow.com/questions/276927/can-i-concatenate-multiple-mysql-rows-into-one-field#comment14513101_276949\">his comment,</a> you can add the <code>DISTINCT</code> operator to avoid duplicates:</p>\n<pre><code>SELECT person_id,\n   GROUP_CONCAT(DISTINCT hobbies SEPARATOR ', ')\nFROM peoples_hobbies\nGROUP BY person_id;\n</code></pre>\n<p>As Jan stated in <a href=\"https://stackoverflow.com/questions/276927/can-i-concatenate-multiple-mysql-rows-into-one-field#comment72475644_276949\">their comment,</a> you can also sort the values before imploding it using <code>ORDER BY</code>:</p>\n<pre><code>SELECT person_id, \n       GROUP_CONCAT(hobbies ORDER BY hobbies ASC SEPARATOR ', ')\nFROM peoples_hobbies\nGROUP BY person_id;\n</code></pre>\n<p>As Dag stated in <a href=\"https://stackoverflow.com/questions/276927/can-i-concatenate-multiple-mysql-rows-into-one-field/276949#comment12638055_276949\">his comment,</a> there is a 1024 byte limit on the result. To solve this, run this query before your query:</p>\n<pre><code>SET group_concat_max_len = 2048;\n</code></pre>\n<p>Of course, you can change <code>2048</code> according to your needs. To calculate and assign the value:</p>\n<pre><code>SET group_concat_max_len = CAST(\n                     (SELECT SUM(LENGTH(hobbies)) + COUNT(*) * LENGTH(', ')\n                           FROM peoples_hobbies\n                           GROUP BY person_id) AS UNSIGNED);\n</code></pre>\n"}, {"owner": {"account_id": 197, "reputation": 42856, "user_id": 244, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.sstatic.net/OPy8n.jpg?s=256", "display_name": "Claude Houle", "link": "https://stackoverflow.com/users/244/claude-houle"}, "is_accepted": true, "score": 2076, "last_activity_date": 1613577995, "last_edit_date": 1613577995, "creation_date": 1219668474, "answer_id": 25971, "question_id": 25969, "content_license": "CC BY-SA 4.0", "body": "<p>Try:</p>\n<pre><code>INSERT INTO table1 ( column1 )\nSELECT  col1\nFROM    table2  \n</code></pre>\n<p>This is standard ANSI SQL and should work on any DBMS</p>\n<p>It definitely works for:</p>\n<ul>\n<li>Oracle</li>\n<li>MS SQL Server</li>\n<li>MySQL</li>\n<li>Postgres</li>\n<li>SQLite v3</li>\n<li>Teradata</li>\n<li>DB2</li>\n<li>Sybase</li>\n<li>Vertica</li>\n<li>HSQLDB</li>\n<li>H2</li>\n<li>AWS RedShift</li>\n<li>SAP HANA</li>\n<li>Google Spanner</li>\n</ul>\n"}, {"owner": {"account_id": 4511, "reputation": 142014, "user_id": 6819, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/20cd0e7eb3c9eeeafb8ef081d3b516e0?s=256&d=identicon&r=PG", "display_name": "Darrel Miller", "link": "https://stackoverflow.com/users/6819/darrel-miller"}, "is_accepted": true, "score": 2053, "last_activity_date": 1630739191, "last_edit_date": 1630739191, "creation_date": 1221489504, "answer_id": 63480, "question_id": 63447, "content_license": "CC BY-SA 4.0", "body": "<p>The <code>CASE</code> statement is the closest to IF in SQL and is supported on all versions of SQL Server.</p>\n<pre><code>SELECT CAST(\n             CASE\n                  WHEN Obsolete = 'N' or InStock = 'Y'\n                     THEN 1\n                  ELSE 0\n             END AS bit) as Saleable, *\nFROM Product\n</code></pre>\n<p>You only need to use the <code>CAST</code> operator if you want the result as a Boolean value. If you are happy with an <code>int</code>, this works:</p>\n<pre><code>SELECT CASE\n            WHEN Obsolete = 'N' or InStock = 'Y'\n               THEN 1\n               ELSE 0\n       END as Saleable, *\nFROM Product\n</code></pre>\n<p><code>CASE</code> statements can be embedded in other <code>CASE</code> statements and even included in aggregates.</p>\n<p>SQL Server Denali (SQL Server 2012) adds the <a href=\"http://msdn.microsoft.com/en-us/library/hh213574%28v=sql.110%29.aspx\" rel=\"noreferrer\">IIF</a> statement which is also available in <a href=\"http://www.techonthenet.com/access/functions/advanced/iif.php\" rel=\"noreferrer\">access</a> (pointed out by <a href=\"https://stackoverflow.com/questions/63447/how-do-you-perform-an-if-then-in-an-sql-select/6769805#6769805\">Martin Smith</a>):</p>\n<pre><code>SELECT IIF(Obsolete = 'N' or InStock = 'Y', 1, 0) as Saleable, * FROM Product\n</code></pre>\n"}, {"owner": {"account_id": 3186, "reputation": 2663, "user_id": 4544, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38c94104e55ed85966eee3ec5b2b7f97?s=256&d=identicon&r=PG", "display_name": "Jim Harte", "link": "https://stackoverflow.com/users/4544/jim-harte"}, "is_accepted": true, "community_owned_date": 1310562865, "score": 2049, "last_activity_date": 1710331268, "last_edit_date": 1710331268, "creation_date": 1220887275, "answer_id": 49928, "question_id": 49925, "content_license": "CC BY-SA 4.0", "body": "<p><code>UNION</code> removes duplicate rows (where all columns in the results are the same), <code>UNION ALL</code> does not.</p>\n<p>There is a performance hit when using <code>UNION</code> instead of <code>UNION ALL</code>, since the database server must do additional work to remove the duplicate rows, but usually you do not want the duplicates (especially when developing reports).</p>\n<p>To identify duplicates, rows must be comparable types as well as compatible types. This will depend on the SQL system. For example the system may truncate all long text columns to make short text columns for comparison (MS Jet), or may refuse to compare binary columns (ORACLE)</p>\n<h3>UNION Example:</h3>\n<pre><code>SELECT 'foo' AS bar\nUNION\nSELECT 'foo' AS bar\n</code></pre>\n<p><strong>Result:</strong></p>\n<pre><code>+-----+\n| bar |\n+-----+\n| foo |\n+-----+\n1 row in set (0.00 sec)\n</code></pre>\n<h3>UNION ALL example:</h3>\n<pre><code>SELECT 'foo' AS bar\nUNION ALL\nSELECT 'foo' AS bar\n</code></pre>\n<p><strong>Result:</strong></p>\n<pre><code>+-----+\n| bar |\n+-----+\n| foo |\n| foo |\n+-----+\n2 rows in set (0.00 sec)\n</code></pre>\n"}, {"owner": {"account_id": 28117, "reputation": 107498, "user_id": 74757, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/10331bb0b4eb995500acc85fb0d16aea?s=256&d=identicon&r=PG", "display_name": "C\u1d0f\u0280\u028f", "link": "https://stackoverflow.com/users/74757/c%e1%b4%8f%ca%80%ca%8f"}, "is_accepted": true, "score": 2014, "last_activity_date": 1714751788, "last_edit_date": 1714751788, "creation_date": 1255915851, "answer_id": 1586588, "question_id": 1586560, "content_license": "CC BY-SA 4.0", "body": "<p><strong>Single quotes are escaped by doubling them up</strong>, just as you've shown us in your example. The following SQL illustrates this functionality. I tested it on SQL Server 2008:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>DECLARE @my_table TABLE (\n    [value] VARCHAR(200)\n)\n    \nINSERT INTO @my_table VALUES ('hi, my name''s tim.')\n\nSELECT * FROM @my_table\n</code></pre>\n<h3>Results</h3>\n<pre class=\"lang-none prettyprint-override\"><code>value\n==================\nhi, my name's tim.\n</code></pre>\n"}, {"owner": {"account_id": 904738, "reputation": 656291, "user_id": 939860, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ed7cecf2bd835cf5670d271d0d104f51?s=256&d=identicon&r=PG", "display_name": "Erwin Brandstetter", "link": "https://stackoverflow.com/users/939860/erwin-brandstetter"}, "is_accepted": false, "score": 1831, "last_activity_date": 1729118484, "last_edit_date": 1729118484, "creation_date": 1317608512, "answer_id": 7630564, "question_id": 3800551, "content_license": "CC BY-SA 4.0", "body": "<p><a href=\"https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT\" rel=\"noreferrer\"><strong><code>DISTINCT ON</code></strong></a> is typically simplest and fastest for this in <strong>PostgreSQL</strong>.<br />\n<sub>(For performance optimization for certain workloads see below.)</sub></p>\n<pre class=\"lang-sql prettyprint-override\"><code>SELECT DISTINCT ON (customer)\n       id, customer, total\nFROM   purchases\nORDER  BY customer, total DESC, id;\n</code></pre>\n<p>Or shorter (if not as clear) with ordinal numbers of output columns:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>SELECT DISTINCT ON (2)\n       id, customer, total\nFROM   purchases\nORDER  BY 2, 3 DESC, 1;\n</code></pre>\n<p>If <code>total</code> can be <code>null</code>, add <code>NULLS LAST</code>:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>...\nORDER  BY customer, total DESC NULLS LAST, id;\n</code></pre>\n<p>Works either way, but you'll want to <a href=\"https://dba.stackexchange.com/q/254731/3684\">match existing indexes</a></p>\n<p><em>db&lt;&gt;fiddle <a href=\"https://dbfiddle.uk/?rdbms=postgres_13&amp;fiddle=bf589b26f6e9fe8cdf3c6ca6e045eb6d\" rel=\"noreferrer\">here</a></em></p>\n<h3>Major points</h3>\n<p><strong><code>DISTINCT ON</code></strong> is a PostgreSQL extension of the standard, where only <code>DISTINCT</code> on the whole <code>SELECT</code> list is defined.</p>\n<p>List any number of expressions in the <code>DISTINCT ON</code> clause, the combined row value defines duplicates. <a href=\"https://www.postgresql.org/docs/current/queries-select-lists.html#QUERIES-DISTINCT\" rel=\"noreferrer\">The manual:</a></p>\n<blockquote>\n<p>Obviously, two rows are considered distinct if they differ in at least\none column value. <strong>Null values are considered equal in this\ncomparison.</strong></p>\n</blockquote>\n<p>Bold emphasis mine.</p>\n<p><code>DISTINCT ON</code> can be combined with <strong><code>ORDER BY</code></strong>. Leading expressions in <code>ORDER BY</code> must be in the set of expressions in <code>DISTINCT ON</code>, but you can rearrange order among those freely. <a href=\"https://dba.stackexchange.com/a/89786/3684\">Example.</a><br />\nYou can add <em>additional</em> expressions to <code>ORDER BY</code> to pick a particular row from each group of peers. Or, as <a href=\"https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT\" rel=\"noreferrer\">the manual puts it</a>:</p>\n<blockquote>\n<p>The <code>DISTINCT ON</code> expression(s) must match the leftmost <code>ORDER BY</code>\nexpression(s). The <code>ORDER BY</code> clause will normally contain additional\nexpression(s) that determine the desired precedence of rows within\neach <code>DISTINCT ON</code> group.</p>\n</blockquote>\n<p>I added <code>id</code> as last item to break ties:<br />\n<em>&quot;Pick the row with the smallest <code>id</code> from each group sharing the highest <code>total</code>.&quot;</em></p>\n<p>To order results in a way that disagrees with the sort order determining the first per group, you can nest above query in an outer query with another <code>ORDER BY</code>. <a href=\"https://stackoverflow.com/a/9796104/939860\">Example.</a></p>\n<p>If <code>total</code> can be <code>null</code>, you <em>most probably</em> want the row with the greatest non-null value. Add <strong><code>NULLS LAST</code></strong> like demonstrated. See:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9510509/postgresql-sort-by-datetime-asc-null-first/9511492#9511492\">Sort by column ASC, but NULL values first?</a></li>\n</ul>\n<p><strong>The <code>SELECT</code> list</strong> is not constrained by expressions in <code>DISTINCT ON</code> or <code>ORDER BY</code> in any way:</p>\n<ul>\n<li><p>You <em>don't have to</em> include any of the expressions in <code>DISTINCT ON</code> or <code>ORDER BY</code>.</p>\n</li>\n<li><p>You <em>can</em> include any other expression in the <code>SELECT</code> list. This is instrumental for replacing complex subqueries and aggregate / window functions.</p>\n</li>\n</ul>\n<p>I tested with Postgres versions 8.3 \u2013 17. But the feature has been there at least since version 7.1, so basically always.</p>\n<h2>Index</h2>\n<p>The <em>perfect</em> index for the above query would be a <a href=\"https://www.postgresql.org/docs/current/indexes-multicolumn.html\" rel=\"noreferrer\">multi-column index</a> spanning all three columns in matching sequence and with matching sort order:</p>\n<pre><code>CREATE INDEX purchases_3c_idx ON purchases (customer, total DESC, id);\n</code></pre>\n<p>May be too specialized. But use it if read performance for the particular query is crucial. If you have <code>DESC NULLS LAST</code> in the query, use the same in the index so that sort order matches and the index is perfectly applicable.</p>\n<h2>Effectiveness / Performance optimization</h2>\n<p>Weigh cost and benefit before creating tailored indexes for each query. The potential of above index largely depends on <strong>data distribution</strong>.</p>\n<p>The index is used because it delivers pre-sorted data. In Postgres 9.2 or later the query can also benefit from an <strong><a href=\"https://www.postgresql.org/docs/current/indexes-index-only-scans.html\" rel=\"noreferrer\">index only scan</a></strong> if the index is smaller than the underlying table. The index has to be scanned in its entirety, though. <a href=\"https://dba.stackexchange.com/a/313755/3684\">Example.</a></p>\n<p>For <strong><em>few</em> rows per customer</strong> (high cardinality in column <code>customer</code>), this is very efficient. Even more so if you need sorted output anyway. The benefit shrinks with a growing number of rows per customer.<br />\nIdeally, you have enough <a href=\"https://www.postgresql.org/docs/current/runtime-config-resource.html#GUC-WORK-MEM\" rel=\"noreferrer\"><strong><code>work_mem</code></strong></a> to process the involved sort step in RAM and not spill to disk. But generally setting <code>work_mem</code> <em>too</em> high can have adverse effects. Consider <code>SET LOCAL</code> for exceptionally big queries. Find how much you need with <code>EXPLAIN ANALYZE</code>. Mention of &quot;<em>Disk:</em>&quot; in the sort step indicates the need for more:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/8106181/configuration-parameter-work-mem-in-postgresql-on-linux/8108807#8108807\">Configuration parameter work_mem in PostgreSQL on Linux</a></li>\n<li><a href=\"https://dba.stackexchange.com/a/48633/3684\">Optimize simple query using ORDER BY date and text</a></li>\n</ul>\n<p>For <strong><em>many</em> rows per customer</strong> (low cardinality in column <code>customer</code>), an &quot;<strong>index skip scan</strong>&quot; or <a href=\"https://wiki.postgresql.org/wiki/Loose_indexscan\" rel=\"noreferrer\"><strong>&quot;loose index scan&quot;</strong></a> would be (much) more efficient. But that's not implemented up to Postgres 17. Serious work to implement it one way or another has been ongoing for years now, but so far unsuccessful. See <a href=\"https://commitfest.postgresql.org/19/1741/\" rel=\"noreferrer\">here</a> and <a href=\"https://www.postgresql.org/message-id/flat/20200609102247.jdlatmfyeecg52fi%40localhost\" rel=\"noreferrer\">here</a>.<br />\nFor now, there are <strong>faster query techniques</strong> to substitute for this. In particular if you have a separate table holding unique customers, which is the typical use case. But also if you don't:</p>\n<ul>\n<li><strong><a href=\"https://stackoverflow.com/questions/25536422/optimize-group-by-query-to-retrieve-latest-record-per-user/25536748#25536748\">Optimize GROUP BY query to retrieve latest row per user</a></strong></li>\n<li><a href=\"https://stackoverflow.com/questions/66893968/select-distinct-is-slower-than-expected-on-my-table-in-postgresql/66894500#66894500\">SELECT DISTINCT is slower than expected on my table in PostgreSQL</a></li>\n<li><a href=\"https://stackoverflow.com/questions/24244026/optimize-groupwise-maximum-query/24377356#24377356\">Optimize groupwise maximum query</a></li>\n<li><a href=\"https://stackoverflow.com/questions/25957558/querying-last-n-related-records-in-postgres/25965393#25965393\">Query last N related rows per row</a></li>\n</ul>\n<h2>Benchmarks</h2>\n<p><a href=\"https://stackoverflow.com/a/34715134/939860\">See separate answer.</a></p>\n"}, {"owner": {"account_id": 2094542, "reputation": 18645, "user_id": 1863627, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/82b8fc61c42b2719c589385503e5c485?s=256&d=identicon&r=PG", "display_name": "Andrew Campbell", "link": "https://stackoverflow.com/users/1863627/andrew-campbell"}, "is_accepted": true, "score": 1828, "last_activity_date": 1593275861, "last_edit_date": 1593275861, "creation_date": 1363702065, "answer_id": 15501754, "question_id": 15501673, "content_license": "CC BY-SA 4.0", "body": "<p>Try <code>DISABLE KEYS</code> or</p>\n<pre><code>SET FOREIGN_KEY_CHECKS=0;\n</code></pre>\n<p>Make sure to</p>\n<pre><code>SET FOREIGN_KEY_CHECKS=1;\n</code></pre>\n<p>after.</p>\n"}, {"owner": {"account_id": 610, "reputation": 117983, "user_id": 797, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/aef85130bf44caa9b4de0a3153e758f2?s=256&d=identicon&r=PG", "display_name": "Matt Sheppard", "link": "https://stackoverflow.com/users/797/matt-sheppard"}, "is_accepted": false, "community_owned_date": 1499439336, "score": 1750, "last_activity_date": 1737836551, "last_edit_date": 1737836551, "creation_date": 1221299328, "answer_id": 60442, "question_id": 60174, "content_license": "CC BY-SA 4.0", "body": "<p>To use the <strong>parameterized query</strong>, you need to use either <strong>Mysqli</strong> or <strong>PDO</strong>. To rewrite your example with Mysqli, we would need something like the following.</p>\n<pre><code>&lt;?php\nmysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n$mysqli = new mysqli(&quot;server&quot;, &quot;username&quot;, &quot;password&quot;, &quot;database_name&quot;);\n\n$variable = $_POST[&quot;user-input&quot;];\n$stmt = $mysqli-&gt;prepare(&quot;INSERT INTO table (column) VALUES (?)&quot;);\n// &quot;s&quot; means the database expects a string\n$stmt-&gt;bind_param(&quot;s&quot;, $variable);\n$stmt-&gt;execute();\n</code></pre>\n<p>The key function you'll want to read up on there would be <a href=\"http://php.net/mysqli.prepare\" rel=\"nofollow noreferrer\"><code>mysqli::prepare</code></a>.</p>\n<p>Also, as others have suggested, you may find it useful/easier to step up a layer of abstraction with something like <a href=\"http://php.net/pdo\" rel=\"nofollow noreferrer\">PDO</a>.</p>\n<p>Please note that the case you asked about is a fairly simple one and that more complex cases may require more complex approaches. In particular:</p>\n<ul>\n<li>If you want to alter the structure of the SQL based on user input, parameterized queries are not going to help, and the escaping required is not covered by <code>mysql_real_escape_string</code>. In this kind of case, you would be better off passing the user's input through a whitelist to ensure only 'safe' values are allowed through.</li>\n</ul>\n"}, {"owner": {"account_id": 1955, "reputation": 155905, "user_id": 2688, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/f1df0c370bbfd32568f4914d9c771e9d?s=256&d=identicon&r=PG", "display_name": "bdukes", "link": "https://stackoverflow.com/users/2688/bdukes"}, "is_accepted": true, "score": 1742, "last_activity_date": 1460467823, "last_edit_date": 1495540968, "creation_date": 1220477903, "answer_id": 42655, "question_id": 42648, "content_license": "CC BY-SA 3.0", "body": "<ul>\n<li><p><a href=\"http://msdn.microsoft.com/en-us/library/ms187342.aspx\" rel=\"noreferrer\"><code>@@IDENTITY</code></a> returns the last identity value generated for any table in the current session, across all scopes.  <strong>You need to be careful here</strong>, since it's across scopes.  You could get a value from a trigger, instead of your current statement.</p></li>\n<li><p><a href=\"http://msdn.microsoft.com/en-us/library/ms190315.aspx\" rel=\"noreferrer\"><code>SCOPE_IDENTITY()</code></a> returns the last identity value generated for any table in the current session and the current scope.  <strong>Generally what you want to use</strong>.</p></li>\n<li><p><a href=\"http://msdn.microsoft.com/en-us/library/ms175098.aspx\" rel=\"noreferrer\"><code>IDENT_CURRENT('tableName')</code></a> returns the last identity value generated for a specific table in any session and any scope.  This lets you specify which table you want the value from, in case the two above aren't quite what you need (<strong>very rare</strong>).  Also, as @<a href=\"https://stackoverflow.com/questions/42648/best-way-to-get-identity-of-inserted-row#42665\">Guy Starbuck</a> mentioned, \"You could use this if you want to get the current IDENTITY value for a table that you have not inserted a record into.\"</p></li>\n<li><p>The <a href=\"http://msdn.microsoft.com/en-us/library/ms177564.aspx\" rel=\"noreferrer\"><code>OUTPUT</code> clause</a> of the <code>INSERT</code> statement will let you access every row that was inserted via that statement.  Since it's scoped to the specific statement, it's <strong>more straightforward</strong> than the other functions above.  However, it's a little <strong>more verbose</strong> (you'll need to insert into a table variable/temp table and then query that) and it gives results even in an error scenario where the statement is rolled back.  That said, if your query uses a parallel execution plan, this is the <strong>only guaranteed method</strong> for getting the identity (short of turning off parallelism). However, it is executed <em>before</em> triggers and cannot be used to return trigger-generated values.</p></li>\n</ul>\n"}, {"owner": {"account_id": 7229, "reputation": 35466, "user_id": 12469, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/053337d4c6236fa990ad4a90b48de89d?s=256&d=identicon&r=PG", "display_name": "Mark S. Rasmussen", "link": "https://stackoverflow.com/users/12469/mark-s-rasmussen"}, "is_accepted": false, "score": 1725, "last_activity_date": 1458746526, "last_edit_date": 1458746526, "creation_date": 1224659994, "answer_id": 224740, "question_id": 224732, "content_license": "CC BY-SA 3.0", "body": "<p>I believe an <code>UPDATE FROM</code> with a <code>JOIN</code> will help:</p>\n\n<h2>MS SQL</h2>\n\n<pre><code>UPDATE\n    Sales_Import\nSET\n    Sales_Import.AccountNumber = RAN.AccountNumber\nFROM\n    Sales_Import SI\nINNER JOIN\n    RetrieveAccountNumber RAN\nON \n    SI.LeadID = RAN.LeadID;\n</code></pre>\n\n<h2>MySQL and MariaDB</h2>\n\n<pre><code>UPDATE\n    Sales_Import SI,\n    RetrieveAccountNumber RAN\nSET\n    SI.AccountNumber = RAN.AccountNumber\nWHERE\n    SI.LeadID = RAN.LeadID;\n</code></pre>\n"}, {"owner": {"user_type": "does_not_exist", "display_name": "Ritesh"}, "is_accepted": true, "score": 1672, "last_activity_date": 1726747696, "last_edit_date": 1726747696, "creation_date": 1234526032, "answer_id": 545672, "question_id": 194852, "content_license": "CC BY-SA 4.0", "body": "<p>If you are on SQL Server 2017 or Azure, see <a href=\"https://stackoverflow.com/a/42778050/1178676\">Mathieu Renda answer</a>.</p>\n<p>I had a similar issue when I was trying to join two tables with one-to-many relationships. In SQL 2005 I found that <code>XML PATH</code> method can handle the concatenation of the rows very easily.</p>\n<p>If there is a table called <code>STUDENTS</code></p>\n<pre><code>SubjectID       StudentName\n----------      -------------\n1               Mary\n1               John\n1               Sam\n2               Alaina\n2               Edward\n</code></pre>\n<p>Result I expected was:</p>\n<pre><code>SubjectID       StudentName\n----------      -------------\n1               Mary, John, Sam\n2               Alaina, Edward\n</code></pre>\n<p>I used the following <code>T-SQL</code>:</p>\n<pre><code>SELECT Main.SubjectID,\n       LEFT(Main.Students,Len(Main.Students)-1) As &quot;Students&quot;\nFROM\n    (\n        SELECT ST2.SubjectID,\n            (\n                SELECT ST1.StudentName + ',' AS [text()]\n                FROM dbo.Students ST1\n                WHERE ST1.SubjectID = ST2.SubjectID\n                ORDER BY ST1.SubjectID\n                FOR XML PATH (''), TYPE\n            ).value('text()[1]','nvarchar(max)') [Students]\n        FROM dbo.Students ST2\n        GROUP BY ST2.SubjectID\n    ) [Main]\n</code></pre>\n<p>You can do the same thing in a more compact way if you can concat the commas at the beginning and use <code>stuff</code> to skip the first one so you don't need to do a sub-query:</p>\n<pre><code>SELECT ST2.SubjectID, \n    STUFF(\n        (\n            SELECT ',' + ST1.StudentName AS [text()]\n            FROM dbo.Students ST1\n            WHERE ST1.SubjectID = ST2.SubjectID\n            ORDER BY ST1.SubjectID\n            FOR XML PATH (''), TYPE\n        ).value('text()[1]','nvarchar(max)'), 1, 1, '') [Students]\nFROM dbo.Students ST2\nGROUP BY ST2.SubjectID\n</code></pre>\n"}, {"owner": {"account_id": 52839, "reputation": 97668, "user_id": 157957, "user_type": "registered", "profile_image": "https://i.sstatic.net/MBRE7.jpg?s=256", "display_name": "IMSoP", "link": "https://stackoverflow.com/users/157957/imsop"}, "is_accepted": true, "score": 1668, "last_activity_date": 1641822960, "last_edit_date": 1641822960, "creation_date": 1254698299, "answer_id": 1517692, "question_id": 1517635, "content_license": "CC BY-SA 4.0", "body": "<p>Do you want the resulting file on the server, or on the client?</p>\n<h1>Server side</h1>\n<p>If you want something easy to re-use or automate, you can use Postgresql's built in <a href=\"http://www.postgresql.org/docs/current/interactive/sql-copy.html\" rel=\"noreferrer\">COPY</a> command. e.g.</p>\n<pre><code>Copy (Select * From foo) To '/tmp/test.csv' With CSV DELIMITER ',' HEADER;\n</code></pre>\n<p><strong>This approach runs entirely on the remote server</strong> - it can't write to your local PC. It also needs to be run as a Postgres &quot;superuser&quot; (normally called &quot;root&quot;) because Postgres can't stop it doing nasty things with that machine's local filesystem.</p>\n<p>That doesn't actually mean you have to be connected as a superuser (automating that would be a security risk of a different kind), because you can use <a href=\"http://www.postgresql.org/docs/current/interactive/sql-createfunction.html\" rel=\"noreferrer\">the <code>SECURITY DEFINER</code> option to <code>CREATE FUNCTION</code></a> to make a function which <em>runs as though you were a superuser</em>.</p>\n<p>The crucial part is that your function is there to perform additional checks, not just by-pass the security - so you could write a function which exports the exact data you need, or you could write something which can accept various options as long as they meet a strict whitelist. You need to check two things:</p>\n<ol>\n<li>Which <strong>files</strong> should the user be allowed to read/write on disk? This might be a particular directory, for instance, and the filename might have to have a suitable prefix or extension.</li>\n<li>Which <strong>tables</strong> should the user be able to read/write in the database? This would normally be defined by <code>GRANT</code>s in the database, but the function is now running as a superuser, so tables which would normally be &quot;out of bounds&quot; will be fully accessible. You probably don\u2019t want to let someone invoke your function and add rows on the end of your \u201cusers\u201d table\u2026</li>\n</ol>\n<p>I've written <a href=\"http://rwec.co.uk/q/pg-copy\" rel=\"noreferrer\">a blog post expanding on this approach</a>, including some examples of functions that export (or import) files and tables meeting strict conditions.</p>\n<hr />\n<h1>Client side</h1>\n<p>The other approach is to <strong>do the file handling on the client side</strong>, i.e. in your application or script. The Postgres server doesn't need to know what file you're copying to, it just spits out the data and the client puts it somewhere.</p>\n<p>The underlying syntax for this is the <code>COPY TO STDOUT</code> command, and graphical tools like pgAdmin will wrap it for you in a nice dialog.</p>\n<p>The <strong><code>psql</code> command-line client</strong> has a special &quot;meta-command&quot; called <strong><code>\\copy</code></strong>, which takes all the same options as the &quot;real&quot; <code>COPY</code>, but is run inside the client:</p>\n<pre><code>\\copy (Select * From foo) To '/tmp/test.csv' With CSV DELIMITER ',' HEADER\n</code></pre>\n<p>Note that there is no terminating <code>;</code>, because meta-commands are terminated by newline, unlike SQL commands.</p>\n<p>From <a href=\"http://www.postgresql.org/docs/current/interactive/app-psql.html#APP-PSQL-META-COMMANDS-COPY\" rel=\"noreferrer\">the docs</a>:</p>\n<blockquote>\n<p>Do not confuse COPY with the psql instruction \\copy. \\copy invokes COPY FROM STDIN or COPY TO STDOUT, and then fetches/stores the data in a file accessible to the psql client. Thus, file accessibility and access rights depend on the client rather than the server when \\copy is used.</p>\n</blockquote>\n<p>Your application programming language <em>may</em> also have support for pushing or fetching the data, but you cannot generally use <code>COPY FROM STDIN</code>/<code>TO STDOUT</code> within a standard SQL statement, because there is no way of connecting the input/output stream. PHP's PostgreSQL handler (<em>not</em> PDO) includes very basic <a href=\"http://www.php.net/manual/en/function.pg-copy-from.php\" rel=\"noreferrer\"><code>pg_copy_from</code></a> and <a href=\"http://www.php.net/manual/en/function.pg-copy-to.php\" rel=\"noreferrer\"><code>pg_copy_to</code></a> functions which copy to/from a PHP array, which may not be efficient for large data sets.</p>\n"}], "has_more": true, "quota_max": 300, "quota_remaining": 297}